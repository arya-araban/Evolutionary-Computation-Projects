import random
from lib.es import es_comma, es_plus, es_classic
from lib.plot import plot_func
import numpy as np


# the objective function is Rosenbrock!
def rosenbrock(v):
    """
      This function returns the Rosenbrock function result of a vector
    """
    total = 0
    for i in range(len(v) - 1):
        xi = v[i]
        x_next = v[i + 1]
        new = 100 * (x_next - xi ** 2) ** 2 + (xi - 1) ** 2
        total = total + new
    return total


def main():
    """ THE MAIN FUNCTION USED FOR CLASSIC ES """

    # define the random seed
    random.seed(103)
    # define the maximum step size
    sigma = 0.06

    # define the parent vector size
    n = 50

    best_score, success_rate = es_classic(rosenbrock, bounds=[-30, 30], n_iter=10000, step_size=sigma, n_parent_size=n)
    print('\n ---- \n')
    print(f"best_score: {best_score:.2f} --- success_rate: {success_rate}")


def main2(type='plus'):
    """ THE MAIN FUNCTION USED FOR ES COMMA OR ES PLUS  """

    # define the bounds
    bounds = [-30, 30]
    # define the total iterations
    n_iter = 10000
    # number of parents selected
    mu = 20
    # initial population size (the number of children generated by parents)
    lam = 100

    # define the maximum step size
    sigma = 0.15

    # define the parent vector size
    n = 50

    # perform the evolution strategy (mu, lambda) search
    if type == 'comma':
        best, score = es_comma(rosenbrock, bounds, n_iter, step_size=sigma, n_selected_parents=mu, population_size=lam,
                               n_parent_size=n)
    elif type == 'plus':
        best, score = es_plus(rosenbrock, bounds, n_iter, step_size=sigma, n_selected_parents=mu, population_size=lam,
                              n_parent_size=n)


if __name__ == '__main__':
    main()
